#include "grid/octree.h"
#include "embed.h"
#include "navier-stokes/centered.h"
#include "two-phase.h"
#include "tension.h"
#include "../contact-embed3D.h"
// #include "tag"
// #include "view.h"

#define LEVEL 9
#define RHOR 80

int j;
double uemax = 0.5;
double t_end = 2.5 [0,1];

const double H = 1 [1];  // gas nozzle 
const double R = 3*H;  // liquid inlet
const double RHO1 = 1;
const double SIGMA = 1.;

double MUl[4] = {2.e-2, 5.e-3, 5.e-3, 5.e-3};
double MUg[4] = {1.e-1, 2.5e-2, 2.5e-2, 2.5e-2};
double Ul[4] = {2, 2, 1, 0.5};
double Ug[4] = {40, 160, 160, 160};
double theta0 = 70;


u.n[left] = dirichlet	(sqrt(sq(y) + sq(z)) < R? Ul[j]:0);
u.t[left] = dirichlet	(0);
u.r[left] = dirichlet	(0);
p[left]   = neumann	(0);
pf[left]  = neumann	(0);

u.n[right] = neumann 	(0);
uf.n[right] = neumann 	(0);
p[right] = dirichlet 	(0);
pf[right] = dirichlet 	(0);

u.n[top] = dirichlet 	(sqrt(sq(x) + sq(z)) < H/2? -Ug[j]:0);
u.t[top] = dirichlet 	(0);
p[top] = neumann 	(0);
pf[top] = neumann 	(0);

u.n[bottom] = dirichlet	(sqrt(sq(x) + sq(z)) < H/2? Ug[j]:0);
u.t[top] = dirichlet 	(0);
p[bottom] = neumann 	(0);
pf[bottom] = neumann 	(0);

// u.n [embed] = dirichlet(0); // gives error somehow?
uf.n [embed] = dirichlet(0);
u.t[embed] = dirichlet	(0.);
uf.t[embed] = dirichlet	(0.);
p[embed] = neumann	(0);
pf[embed] = neumann	(0);

int main (int argc, char * argv[]) {
  size (25*H);
  init_grid (2 << (LEVEL - 4));
  origin (-5*R, -(25*H/2), -(25*H/2));
  
  rho1 = RHO1;
  rho2 = rho1 / RHOR;
  f.sigma = SIGMA;

  j = 1;
  mu1 = MUl[j];
  mu2 = MUg[j];

  const scalar c[] = theta0*pi/180;
  contact_angle = c;

  TOLERANCE = 1e-4 [*];

  run();
}

event init (t = 0) {
  mask(y > 5*H? top: y < -5*H ? bottom : none);
  mask(z > 5*H? front: z < -5*H? back: none);
  astats ss;
  int ic = 0;
  do {
    ic++;
    solid (cs, fs, -intersection(sqrt(sq(y) + sq(z)) - (R), sqrt(sq(x) + sq(z)) - (H/2)));
    fraction (f, x < -H);
    ss = adapt_wavelet ({cs, f}, (double[]) {1.e-30, 1.e-30},
		        maxlevel = LEVEL , minlevel = (1)); 
  } while ((ss.nf || ss.nc) && ic < 100);
  refine (((cs[] > 0 && cs[] < 1) || (f[] > 0 && f[] < 1)) && level < LEVEL);
  solid (cs, fs, -intersection(sqrt(sq(y) + sq(z)) - (R), sqrt(sq(x) + sq(z)) - (H/2)));
  fraction (f, x < -H);

  foreach() {
    foreach_dimension()
      u.x[] = 0.;
  }
}

event logfile (i++; t <= t_end) {
  fprintf (stderr, "%d %g %d\n", i, t, j);
  /*
  char name[80];
  sprintf (name, "%d-%d-xh2", k, j);
  FILE * fp2 = fopen (name, "a");
  foreach_point(-2*H, 0)
    fprintf (fp2, "%g %g %g %g %g\n", t, x, y, f[], u.y[]);
  fclose(fp2);

  sprintf (name, "%d-%d-xh1", k, j);
  FILE * fp1 = fopen (name, "a");
  foreach_point(-1*H, 0)
    fprintf (fp1, "%g %g %g %g %g\n", t, x, y, f[], u.y[]);
  fclose(fp1);

  sprintf (name, "%d-%d-xh0", k, j);
  FILE * fp0 = fopen (name, "a");
  foreach_point(0, 0)
    fprintf (fp0, "%g %g %g %g %g\n", t, x, y, f[], u.y[]);
  fclose(fp0);
  */
}
/*
event movie (t += 0.05; t <= t_end) {
  char name[80];
  sprintf (name, "vof-%g.png", t);
  FILE * fp1 = fopen(name , "w");
  view (fov = 20, quat = {0.515965,0.140691,0.245247,0.808605});
  clear();
  draw_vof ("f");
  save (fp = fp1);
  fclose (fp1);

  sprintf (name, "plane-%g.png", t);
  FILE * fp2 = fopen(name, "w");
  draw_vof ("f");
  squares ("cs", min = 0, max = 1);
  save (fp = fp2);
  fclose (fp2);
}
*/
event adapt (i++) {	
  adapt_wavelet ({cs,f,u}, (double[]){1.e-4, 1.e-4, uemax,uemax,uemax}, 
		  maxlevel = LEVEL, minlevel = LEVEL - 4);
}
